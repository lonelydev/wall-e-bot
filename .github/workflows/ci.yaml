name: Build and Deploy
on: 
  push:
      branches:
        - main

permissions:
    id-token: write
    contents: read

env:
  AWS_REGION: us-east-1            # set this to your preferred AWS region, e.g. us-west-1
            # set this to your Amazon ECR repository name
  CONTAINER_NAME: wall-e           # set this to the name of the container in the

jobs:
    build:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [18.x]

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            - name: use Node.js 18
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.node-version }}
                cache: 'npm'
            - run: npm ci
            - run: npm run build
            - run: npm test

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
    
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
    
            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: wall-e 
                IMAGE_TAG: ${{ github.sha }}
              run: |
                # Build a docker container and
                # push it to ECR so that it can
                # be deployed to lambda.
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
